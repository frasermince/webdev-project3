<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" href="css/animate.min.css">
		<link rel="stylesheet" href="css/style.css">
		<script src="js/jquery.1.9.1.js"></script>
	</head>
	
	<body>

    <div id="fb-root"></div>
		<hgroup id="login">    
      <h1>Space Shooters</h1>
      <h2><input type="text" id="loginName" placeholder="Name" required="true"> <button id="startButton">Start!</button></h2>
      <fb:login-button show-faces="false" width="300" max-rows="1"></fb:login-button>
    </hgroup>
    <hgroup id="leaderboard"  class="noDisplay">    
      <h1>Leaderboard</h1>
      <h2></h2>
    </hgroup>
		<canvas id="gameCanvas" class="noDisplay"></canvas>
		<footer>
      <h2><a onClick="hiddenAchievement();">Developed in Abilene, Texas</a></h2>
      <span class="actions">
        <a onClick="inviteFriends();"><img src="img/invite.png"></a>
        <a onClick="postToFeed();"><img src="img/post.png"></a>
        <a onClick="challengeFriend();"><img src="img/challenge.png"></a>
      </span>
    </footer>
		<img id="pokeball" class="noDisplay" src="img/ship0.png">
		<img id="pikachu" class="noDisplay" src="img/ship8.png">
		<img id="miss" class="noDisplay" src="img/missile.png">
    <div class="leaderboard"></div>
	</body>
	<script src="/socket.io/socket.io.js"></script>
	<script src="js/requestAnimationFrame.js"></script>
	<script src="js/keys.js"></script>
	<script src="js/game.js"></script>
	<script src="js/onload.js"></script>
  <script>
  var userId;
      window.fbAsyncInit = function() {
        FB.init({
          appId      : '193259027491899', // App ID
            status     : true, // check login status
            cookie     : true, // enable cookies to allow the server to access the session
            xfbml      : true,  // parse XFBML
            frictionlessRequests: true
        });

        FB.Event.subscribe('auth.authResponseChange', function(response) {
            // Here we specify what we do with the response anytime this event occurs. 
            if (response.status === 'connected') {
              // The response object is returned with a status field that lets the app know the current
              // login status of the person. In this case, we're handling the situation where they 
              // have logged in to the app.
              token = response.authResponse.accessToken;
              loggedIn();
            } else if (response.status === 'not_authorized') {
              // In this case, the person is logged into Facebook, but not into the app, so we call
              // FB.login() to prompt them to do so. 
              // In real-life usage, you wouldn't want to immediately prompt someone to login 
              // like this, for two reasons:
              // (1) JavaScript created popup windows are blocked by most browsers unless they 
              // result from direct user interaction (such as a mouse click)
              // (2) it is a bad experience to be continually prompted to login upon page load.
              performFacebookLogin();
            } else {
              // In this case, the person is not logged into Facebook, so we call the login() 
              // function to prompt them to do so. Note that at this stage there is no indication
              // of whether they are logged into the app. If they aren't then they'll see the Login
              // dialog right after they log in to Facebook. 
              // The same caveats as above apply to the FB.login() call here.
              performFacebookLogin();
            }
        });
      }

      function performFacebookLogin() {
        FB.login(function(response) {
          // handle the response
          }, {scope: 'publish_actions'}
        );
      }

      // Here we run a very simple test of the Graph API after login is successful. 
      // This testAPI() function is only called in those cases. 
      function loggedIn() {
        console.log('Welcome!  Fetching your information.... ');
        FB.api('/me', function(response) {
          console.log(response);
          console.log('Good to see you, ' + response.name + '.');

          if(response.first_name == "Clement") {
            clementAchievement();
            addScore(100);
          } else if(response.first_name == "Fraser") {
            fraserAchievement();
          }

          userId = response.userId;
          console.log(token);
          startGame();
          addFirstGameAchievement();
        });

        //Perform time sensitive achievements
        var d = new Date();
        var hrs = d.getHours();
        var date = d.getDate();
        var month = d.getMonth();

        if(hrs >= 22 && hrs <=24) {
          nightAchievement();
        } else if(hrs >= 0 && hrs <= 5) {
          morningAchievement();
        }

        if(month == 5 && date>=6 && date<=10) {
          finalsAchievement();
        }
      }

      function inviteFriends() {
        FB.ui({method: 'apprequests',
          message: 'Join this awesome game!'
        }, requestCallback);

        function requestCallback(response) {
          invitedAchievement();
        }
      }

      function challengeFriend() {
         FB.ui({method: 'apprequests',
          message: 'Challenge Friend!'
        }, requestCallback);

        function requestCallback(response) {
        }
      }

      function postToFeed() {

        // calling the API ...

        var descriptionStr = "I got a score of " + getUserScore();
        var obj = {
          method: 'feed',
          link: 'https://apps.facebook.com/acuspaceshooter/',
          picture: 'score.png',
          name: 'Space Shooter',
          caption: 'Check out my score!',
          description: descriptionStr
        };

        function callback(response) {
          postedAchievement();
        }

        FB.ui(obj, callback);
      }

      function addAchievement(params) {
        console.log("Adding Achievement to API with Params: ", params);
        FB.api("/193259027491899/achievements", 'POST', params , function(response) {
          if (!response || response.error) {
            console.log('Error occured');
            console.log('response: ', response.error);
          } else {
            console.log('response: ', response);
          }
        });
        
        FB.api("/"+FB.getUserID()+"/achievements", 'post', {achievement: params.achievement}, function(response) {
          if (!response || response.error) {
            console.log('Error occured');
            console.log('response: ', response.error);
          } else {
            console.log('response: ', response);
          }
        });
      }


      var appToken = "193259027491899|1tfJ2q0bgK0q9DLCeTQJptOVD8w";
      function addFirstGameAchievement() {
        console.log("addFirstGameAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/firstgameachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function lostAGameAchievement() {
        console.log("lostAGameAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/lostagameachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function postedAchievement() {
        console.log("postedAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/postedachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function invitedAchievement() {
        console.log("invitedAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/invitedachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function finalsAchievement() {
        console.log("finalsAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/finalsachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function clementAchievement() {
        console.log("clementAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/clementachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function fraserAchievement() {
        console.log("fraserAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/fraserachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function hiddenAchievement() {
        console.log("hiddenAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/hiddenachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function nightAchievement() {
        console.log("nightAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/nightachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function morningAchievement() {
        console.log("morningAchievement");
        var achievementURL = "http://space-shooter-7699.onmodulus.net/morningachievement.html";

        var params = { achievement: achievementURL, access_token: appToken};
        addAchievement(params);
      }

      function displayLeaderboard() {
        FB.api("/193259027491899/scores", 'get', function(response) {
          if (!response || response.error) {
            console.log('Error occured');
            console.log('response: ', response.error);
          } else {
            //console.log('response: ', response);

            var htmlcontents = "";
            for(var i=0; i<response.data.length; i++) {
              htmlcontents += "<div>" + response.data[i].user.name + " " + response.data[i].score + "</div>";
            }
            $("#leaderboard h2").html(htmlcontents);
            $('#leaderboard').removeClass("noDisplay");
          }
        });
      }

      function getUserScore() {
        FB.api("/193259027491899/scores", 'get', function(response) {
          if (!response || response.error) {
            console.log('Error occured');
            console.log('response: ', response.error);
          } else {

            for(var i=0; i<response.data.length; i++) {
              if(response.data[i].user.id == userId) {
                return response.data[i].score;
              }
            }
          }
        });

        return 0;
      }

      function addScore(newScore) {
          FB.api('/me/scores', 'post', {score: newScore}, function(response) {
          console.log("ADDING SCORE WOOHOO");
          if (!response || response.error) {
          console.log(response);
          console.log('Error occured');
          } else {
          console.log('Post ID: ' + response.id);
          }
        });
      }


      // Load the SDK asynchronously
      (function(d){
       var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
       if (d.getElementById(id)) {return;}
       js = d.createElement('script'); js.id = id; js.async = true;
       js.src = "//connect.facebook.net/en_US/all.js";
       ref.parentNode.insertBefore(js, ref);
      }(document));
    </script>
</html>